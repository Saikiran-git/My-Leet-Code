Sol1 using backtracking

class Solution {
public:
    vector<vector<int>> res;
    void permutations(vector<int>& nums, int ind1, int indn) {
        if (ind1 == indn)
            res.push_back(nums);
        else{
            for(int j = ind1; j <= indn; j++) {
                swap(nums[ind1], nums[j]);
                permutations(nums, ind1 + 1, indn);
                swap(nums[ind1], nums[j]);
            }
        }
    }
    
    vector<vector<int>> permute(vector<int>& nums) {
        permutations(nums, 0, nums.size() - 1);
        return res;
    }
};


sol2 using stl

class Solution {
public:
    vector<vector<int>> res;
    void permutations(vector<int>& nums, int ind1, int indn) {
        sort(nums.begin(), nums.end());
        vector<vector<int>> res{nums};
        while(next_permutation(nums.begin(), nums.end()))
            res.push_back(nums);
        return res;
    }
};

