class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
        int len = s.length();
        int wlen = words[0].length(); 
        int sz = words.size();
        int winlen = sz * wlen; //window legnth
        
        vector<int> res;
        unordered_map<string, int> mp;
        
        for(auto i : words) //taking all words into map
            mp[i]++;
        
        for(int i = 0; i <= len - winlen; i++){
            
            unordered_map<string, int> ump; //map for all words from the present window
            
            for(int j = i; j < i + winlen; j += wlen){ //append words into ump
                string str = "";
                for(int k = j; k < j + wlen; k++)
                    str += s[k];
                ump[str]++;
            }
            
            if(ump == mp) 
                res.push_back(i); // compare and push indices
        }
        return res;
    }
};